{"version":3,"file":"app.js.map","mappings":"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","names":["ClaimSetType","ClaimStatus","ClaimType","AchievementDistributionFlags","GameExtendedClaimType","buildAuthorization","options","username","webApiKey","Error","sleep","ms","resolve","html","literals","expr","string","index","literal","params","data","resetDatePicker","now","getAuthorization","obj","E","showAuthModal","modal","button","ev","auth","altUsername","submission","date","games","_","id","achievements","switchToTab","render","elem","func","statusElem","img","sleepTime","checkGame","checkAchievement","datePicker","target","name","url","result","a","status","awardDate","timestamp","alt","altResult","info","achievement","unlockDate"],"ignoreList":[],"sources":["../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+tar.gz_gidnvlzzvm3niadr6s6f6nomgq/node_modules/@retroachievements/api/src/feed/models/claim-set-type.enum.ts","../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+tar.gz_gidnvlzzvm3niadr6s6f6nomgq/node_modules/@retroachievements/api/src/feed/models/claim-status.enum.ts","../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+tar.gz_gidnvlzzvm3niadr6s6f6nomgq/node_modules/@retroachievements/api/src/feed/models/claim-type.enum.ts","../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+tar.gz_gidnvlzzvm3niadr6s6f6nomgq/node_modules/@retroachievements/api/src/game/models/achievement-distribution-flags.enum.ts","../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+tar.gz_gidnvlzzvm3niadr6s6f6nomgq/node_modules/@retroachievements/api/src/game/models/get-game-extended-response.model.ts","../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+tar.gz_gidnvlzzvm3niadr6s6f6nomgq/node_modules/@retroachievements/api/src/ticket/getTicketData.ts","../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+tar.gz_gidnvlzzvm3niadr6s6f6nomgq/node_modules/@retroachievements/api/src/utils/public/buildAuthorization.ts","../src/app.js"],"sourcesContent":["export enum ClaimSetType {\n  NewSet = 0,\n  Revision = 1,\n}\n","export enum ClaimStatus {\n  Active = 0,\n  Complete = 1,\n  Dropped = 2,\n}\n","export enum ClaimType {\n  Primary = 0,\n  Collaboration = 1,\n}\n","export enum AchievementDistributionFlags {\n  CoreAchievements = 3,\n  UnofficialAchievements = 5,\n}\n","// NOTE: This cannot be a true extension of the `GetGameResponse`\n// interface because the return types for many of these fields\n// are different from the actual RA API.\n\nenum GameExtendedClaimType {\n  Primary = \"0\",\n  Collaboration = \"1\",\n}\n\nexport interface GameExtendedRawAchievementEntity {\n  ID: string;\n  NumAwarded: string;\n  NumAwardedHardcore: string;\n  Title: string;\n  Description: string;\n  Points: string;\n  TrueRatio: string;\n  Author: string;\n  DateModified: string;\n  DateCreated: string;\n  BadgeName: string;\n  DisplayOrder: string;\n  MemAddr: string;\n}\n\ninterface GameExtendedRawClaimEntity {\n  User: string;\n  SetType: string;\n  ClaimType: GameExtendedClaimType;\n  Created: string;\n  Expiration: string;\n}\n\nexport interface GetGameExtendedResponse {\n  ID: number;\n  Title: string;\n  ConsoleID: number;\n  ForumTopicID: number;\n  Flags: number;\n  ImageIcon: string;\n  ImageTitle: string;\n  ImageIngame: string;\n  ImageBoxArt: string;\n  Publisher: string;\n  Developer: string;\n  Genre: string;\n  Released: string;\n  IsFinal: boolean;\n  ConsoleName: string;\n  RichPresencePatch: string;\n  NumAchievements: number;\n  NumDistinctPlayersCasual: string;\n  NumDistinctPlayersHardcore: string;\n  Claims: GameExtendedRawClaimEntity[];\n  Achievements: Record<number, GameExtendedRawAchievementEntity> | [];\n}\n","import type { ID } from \"../utils/internal\";\nimport {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type {\n  AchievementTicketStats,\n  GameTicketStats,\n  MostTicketedGames,\n  RecentTickets,\n  TicketEntity,\n  UserTicketStats,\n} from \"./models\";\n\ninterface GetTicketDataAllPayloadValues {\n  ticketId?: string | number;\n  offset?: number;\n  count?: number;\n  isGettingMostTicketedGames?: true;\n  username?: string;\n  gameId?: string | number;\n  isGettingTicketsForUnofficialAchievements?: true;\n  shouldReturnTicketsList?: true;\n  achievementId?: string | number;\n}\n\n/**\n * BEGIN: Function overload definitions\n */\n\n/**\n * A call to this function will retrieve ticket metadata information\n * about a single achievement ticket, targeted by its ticket ID.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.ticketId The ID of the ticket to get information about.\n *\n * @example\n * ```\n * const ticketData = await getTicketData(\n *   authorization,\n *   { ticketId: 12345 }\n * );\n * ```\n *\n * @returns An object containing metadata about a target ticket.\n */\nexport function getTicketData(\n  authorization: AuthObject,\n  payload: { ticketId: ID }\n): Promise<TicketEntity>;\n\n/**\n * A call to this function will retrieve ticket metadata information\n * about the latest opened achievement tickets on RetroAchievements.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.count Optional. Defaults to 10. Max is 100.\n * How many tickets to retrieve.\n *\n * @param payload.offset Optional. Defaults to 0.\n * Number of tickets to skip. This can be used for pagination.\n *\n * @example\n * ```\n * const ticketData = await getTicketData(authorization);\n * ```\n *\n * @returns A list of the most recently opened tickets on the site.\n */\nexport function getTicketData(\n  authorization: AuthObject,\n  payload?: Partial<{ offset: number; count: number }>\n): Promise<RecentTickets>;\n\n/**\n * A call to this function will retrieve the games on the site with\n * the highest count of opened achievement tickets.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.count Optional. Defaults to 10. Max is 100.\n * How many ticketed games to retrieve.\n *\n * @param payload.offset Optional. Defaults to 0.\n * Number of games to skip. This can be used for pagination.\n *\n * @example\n * ```\n * const ticketData = await getTicketData(\n *   authorization,\n *   { isGettingMostTicketedGames: true }\n * );\n * ```\n *\n * @returns A list of the most recently opened tickets on the site.\n */\nexport function getTicketData(\n  authorization: AuthObject,\n  payload: { isGettingMostTicketedGames: true; offset?: number; count?: number }\n): Promise<MostTicketedGames>;\n\n/**\n * A call to this function will retrieve an achievement developer's\n * ticket stats, targeted by that developer's username.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.username The developer's account username to retrieve\n * ticket stats for.\n *\n * @example\n * ```\n * const ticketData = await getTicketData(\n *   authorization,\n *   { username: \"xelnia\" }\n * );\n * ```\n *\n * @returns An achievement developer's ticket stats.\n */\nexport function getTicketData(\n  authorization: AuthObject,\n  payload: { username: string }\n): Promise<UserTicketStats>;\n\n/**\n * A call to this function will retrieve a game's ticket stats, targeted\n * by the game's ID. If you are unsure of a game's ID, visit its page\n * on the RetroAchievements website and copy the number at the end of the URL.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.gameId The game ID to fetch ticket stats for.\n *\n * @param payload.isGettingTicketsForUnofficialAchievements Optional. Fetch stats\n * for unofficial/non-core achievements that have tickets.\n *\n * @param payload.shouldReturnTicketsList Optional. If true, not only fetches a\n * game's ticket stats, but also returns a list of tickets for the game.\n *\n * @example\n * ```\n * const ticketData = await getTicketData(\n *   authorization,\n *   { gameId: 14_402 }\n * );\n * ```\n *\n * @returns A game's ticket stats, potentially also including the ticket list.\n */\nexport function getTicketData(\n  authorization: AuthObject,\n  payload: {\n    gameId: ID;\n    isGettingTicketsForUnofficialAchievements?: true;\n    shouldReturnTicketsList?: true;\n  }\n): Promise<GameTicketStats>;\n\n/**\n * A call to this function will retrieve the an achievement's\n * ticket stats, targeted by the achievement's ID. If you are unsure\n * of an achievement's ID, open its page on the RetroAchievements\n * website and copy the number at the end of the URL.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.achievementId The ID of the achievement to fetch ticket\n * stats for.\n *\n * @example\n * ```\n * const ticketData = await getTicketData(\n *   authorization,\n *   { achievementId: 12345 }\n * );\n * ```\n *\n * @returns An achievement developer's ticket stats.\n */\nexport function getTicketData(\n  authorization: AuthObject,\n  payload: { achievementId: ID }\n): Promise<AchievementTicketStats>;\n\n/**\n * END: Function overload definitions\n */\n\nexport async function getTicketData(\n  authorization: AuthObject,\n  payload: GetTicketDataAllPayloadValues = {}\n) {\n  const queryParams = buildGetTicketDataQueryParams(payload);\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetTicketData.php\",\n    authorization,\n    queryParams\n  );\n\n  const rawResponse = await call({ url });\n\n  return serializeProperties(rawResponse, {\n    shouldCastToNumbers: [\n      \"ID\",\n      \"AchievementID\",\n      \"Points\",\n      \"GameID\",\n      \"ReportType\",\n      \"ReportState\",\n      \"OpenTickets\",\n    ],\n    shouldMapToBooleans: [\"Hardcore\"],\n  });\n}\n\nconst buildGetTicketDataQueryParams = (\n  payload: GetTicketDataAllPayloadValues\n) => {\n  const {\n    ticketId,\n    isGettingMostTicketedGames,\n    username,\n    gameId,\n    isGettingTicketsForUnofficialAchievements,\n    shouldReturnTicketsList,\n    achievementId,\n  } = payload;\n\n  let queryParams: Record<string, string | number> = {};\n\n  if (ticketId !== undefined) {\n    queryParams[\"i\"] = ticketId;\n  } else if (isGettingMostTicketedGames) {\n    queryParams[\"f\"] = \"1\";\n    queryParams = applyPaginationQueryParams(queryParams, payload);\n  } else if (username) {\n    queryParams[\"u\"] = username;\n  } else if (gameId) {\n    queryParams[\"g\"] = gameId;\n\n    if (isGettingTicketsForUnofficialAchievements) {\n      queryParams[\"f\"] = \"5\";\n    }\n\n    if (shouldReturnTicketsList) {\n      queryParams[\"d\"] = \"1\";\n    }\n  } else if (achievementId) {\n    queryParams[\"a\"] = achievementId;\n  } else {\n    queryParams = applyPaginationQueryParams(queryParams, payload);\n  }\n\n  return queryParams;\n};\n\nconst applyPaginationQueryParams = (\n  currentParams: Record<string, string | number>,\n  payload: Partial<{ count: number; offset: number }>\n) => {\n  const modifiedParams = { ...currentParams };\n\n  if (payload.count !== undefined) {\n    modifiedParams[\"c\"] = payload.count;\n  }\n\n  if (payload.offset !== undefined) {\n    modifiedParams[\"o\"] = payload.offset;\n  }\n\n  return modifiedParams;\n};\n","import type { AuthObject } from \"./models\";\n\n/**\n * Accepts your RetroAchievements.org username and web API key. After\n * receiving these inputs, the function returns you a value that can be\n * used for the authentication parameter by any of the async calls in this\n * library.\n *\n * Your account's personal Web API Key can be found on the Settings page\n * of RetroAchievements.org. Do not use a Web API Key that is not associated\n * with your account.\n *\n * @returns An `AuthObject` that you can pass to any of the API call functions.\n *\n * @example\n * ```\n * const authorization = buildAuthorization({\n *   username: \"Scott\",\n *   webApiKey: \"LtjCwW16nJI7cqOyPIQtXk8v1cfF0tmO\"\n * });\n * ```\n */\nexport const buildAuthorization = (options: AuthObject): AuthObject => {\n  if (!options.username || !options.webApiKey) {\n    throw new Error(`\n      buildAuthorization() requires an object containing a\n      username and webApiKey. eg:\n\n      const authorization = buildAuthorization({\n        username: \"myUserName\",\n        webApiKey: \"myWebApiKey\"\n      })\n    `);\n  }\n\n  return options;\n};\n\n// This function simply returns what it's given, however the return\n// value has the added benefit of type safety.\n","import { buildAuthorization } from \"@retroachievements/api\";\nimport \"./css/style.css\";\n\nconst sleep = ms => new Promise(resolve => setTimeout(() => resolve(), ms));\n\nfunction html(literals, ...expr) {\n    let string = \"\";\n\n    for (const [index, literal] of literals.entries()) {\n        string += literal;\n        if (index in expr) string += expr[index];\n    }\n\n    return string;\n}\n\nlet params = new URL(window.location).searchParams;\nif (params.has(\"data\")) {\n    const data = JSON.parse(window.atob(params.get(\"data\")));\n    document.getElementById(\"username\").value = data.username;\n    document.getElementById(\"submission\").value = data.links;\n}\n\nfunction resetDatePicker() {\n    let now = new Date();\n    document.getElementById(\"startdate\").valueAsDate = new Date(\n        now.getUTCFullYear(),\n        now.getUTCMonth(),\n        1\n    );\n}\nresetDatePicker();\n\nasync function getAuthorization() {\n    if (!localStorage.getItem(\"auth\")) {\n        return await showAuthModal();\n    } else {\n        const obj = JSON.parse(localStorage.getItem(\"auth\"));\n        return buildAuthorization(obj);\n    }\n}\n\nfunction showAuthModal() {\n    let template = document.getElementById(\"authModalTemplate\");\n    let modal = template.content.cloneNode(true);\n    let button = modal.children[0].querySelector(\"button\");\n    document.body.appendChild(modal);\n\n    return new Promise(resolve => {\n        button.addEventListener(\"click\", ev => {\n            let modal = document.querySelector(\"div.authModal\");\n            let auth = {\n                username: modal.querySelector(\"input[name='username']\").value,\n                webApiKey: modal.querySelector(\"input[name='apikey']\").value,\n            };\n            if (modal.querySelector(\"input[name='saveinfo']\").checked) {\n                localStorage.setItem(\"auth\", JSON.stringify(auth));\n            }\n            document.body.removeChild(modal);\n            resolve(buildAuthorization(auth));\n        });\n    });\n}\n\ndocument.getElementById(\"verify\").addEventListener(\"click\", async () => {\n    const auth = await getAuthorization();\n    const username = document.getElementById(\"username\");\n    const altUsername = document.getElementById(\"altUsername\");\n    const submission = document.getElementById(\"submission\");\n    const date = document.getElementById(\"startdate\");\n\n    if (date.value == \"\") {\n        date.style.backgroundColor = \"red\";\n        date.addEventListener(\"focus\", () => date.style.backgroundColor = \"revert\", { once: true });\n        return;\n    }\n\n    const games = Array.from(\n        submission.value.matchAll(\"https://(?:www.)?retroachievements.org/game/([0-9]+)\")\n    ).map(([_, id]) => id);\n\n    const achievements = Array.from(\n        submission.value.matchAll(\"https://(?:www.)?retroachievements.org/achievement/([0-9]+)\")\n    ).map(([_, id]) => id);\n\n    switchToTab(\"output\");\n    username.disabled = true;\n    altUsername.disabled = true;\n    date.disabled = true;\n\n    output.innerHTML = html`\n        <h1>Games</h1><hr />\n        ${games.map(id => html`<div class=\"game\">\n            <div class=\"icon\"></div>\n            <a class=\"title\" href=\"https://retroachievements.org/game/${id}\">${id}</a>\n            <span class=\"timestamp\"></span>\n            <div class=\"status\">?</div>\n        </div>`).join(\"\")}\n\n        <h1>Achievements</h1><hr />\n        ${achievements.map(id => html`<div class=\"achievement\">\n            <div class=\"icon\"></div>\n            <a class=\"title\" href=\"https://retroachievements.org/achievement/${id}\">${id}</a>\n            <span class=\"timestamp\"></span>\n            <div class=\"status\">?</div>\n        </div>`).join(\"\")}\n    `;\n\n    const render = async (elem, func) => {\n        const id = elem.querySelector(\".title\").textContent;\n        const obj = await func(auth, username.value, id, date.valueAsDate);\n        const statusElem = elem.querySelector(\".status\")\n        statusElem.classList.add(...obj.status.split(\" \"));\n        statusElem.textContent = obj.status.includes(\"success\") ?\n            obj.status.includes(\"alt\") ? \"A\" : \"✓\" : \"X\";\n\n        const img = document.createElement(\"img\");\n        img.src = `https://media.retroachievements.org${obj.icon}`;\n        elem.querySelector(\".icon\").appendChild(img);\n\n        elem.querySelector(\".title\").textContent = obj.title;\n        elem.querySelector(\".timestamp\").textContent = obj.timestamp;\n    };\n\n    const sleepTime = 1000;\n\n    for (const elem of output.querySelectorAll(\".game\")) {\n        await render(elem, checkGame);\n        await sleep(sleepTime);\n    }\n\n    for (const elem of output.querySelectorAll(\".achievement\")) {\n        await render(elem, checkAchievement);\n        await sleep(sleepTime);\n    }\n\n    username.disabled = false;\n    altUsername.disabled = false;\n    date.disabled = false;\n});\n\ndocument.getElementById(\"clear\").addEventListener(\"click\", () => {\n    document.getElementById(\"username\").value = \"\";\n    document.getElementById(\"submission\").value = \"\";\n    document.getElementById(\"output\").innerHTML = \"\";\n    document.getElementById(\"username\").disabled = false;\n    document.getElementById(\"startdate\").disabled = false;\n    switchToTab(\"submission\");\n});\n\ndocument.getElementById(\"optionResetAuth\").addEventListener(\"click\", () => {\n    localStorage.removeItem(\"auth\");\n});\n\ndocument.getElementById(\"optionCheckDate\").addEventListener(\"change\", ev => {\n    const datePicker = document.getElementById(\"startdate\");\n    if (ev.target.checked) {\n        datePicker.disabled = false;\n        resetDatePicker();\n    } else {\n        datePicker.disabled = true;\n        datePicker.valueAsDate = new Date(0);\n    }\n});\n\nfor (const elem of document.querySelectorAll(\"#tabs > div\")) {\n    const target = elem.dataset.target;\n    elem.addEventListener(\"mousedown\", () => {\n        switchToTab(target);\n    });\n}\n\nfunction switchToTab(name) {\n    document.getElementById(name).style.display = \"block\";\n    for (const elem of document.querySelectorAll(`#content > :not(#${name})`)) {\n        elem.style.display = \"none\";\n    }\n    for (const elem of document.querySelectorAll(\"#tabs > div\")) {\n        elem.classList.remove(\"selected\");\n        if (elem.dataset.target == name) {\n            elem.classList.add(\"selected\");\n        }\n    }\n}\n\nasync function checkGame(auth, username, id, date) {\n    const url = `https://retroachievements.org/API/API_GetGameInfoAndUserProgress.php?${auth}&u=${username}&g=${id}&a=1`;\n    const result = await fetch(url).then(a => a.json());\n\n    let status = \"failure\";\n    switch (result.HighestAwardKind) {\n        case \"mastered\":\n            status = \"success mastered\";\n            break;\n        case \"beaten-hardcore\":\n            status = \"success\";\n            break;\n        default:\n            break;\n    }\n\n    const awardDate = new Date(result.HighestAwardDate);\n    if (awardDate < date) {\n        status = \"failure\";\n    }\n\n    const timestamp = result.HighestAwardDate ? awardDate.toLocaleDateString() : \"\";\n\n    const alt = document.getElementById(\"altUsername\").value;\n    if (username != alt && alt.length && status == \"failure\") {\n        const altResult = await checkGame(auth, alt, id, date);\n        if (altResult.status.includes(\"success\")) {\n            altResult.status += \" alt\";\n            return altResult;\n        }\n    }\n\n    return {\n        status,\n        title: result.Title,\n        icon: result.ImageIcon,\n        timestamp,\n    }\n}\n\nasync function checkAchievement(auth, username, id, date) {\n    const info = await fetch(`https://retroachievements.org/API/API_GetAchievementUnlocks.php?${auth}&a=${id}&c=1`).then(a => a.json());\n    const game = await fetch(`https://retroachievements.org/API/API_GetGameInfoAndUserProgress.php?${auth}&u=${username}&g=${info.Game.ID}&a=0`).then(a => a.json());\n    const achievement = game.Achievements[info.Achievement.ID];\n    const unlockDate = \"DateEarnedHardcore\" in achievement ? new Date(achievement.DateEarnedHardcore) : null;\n\n    return {\n        status: unlockDate > date ? \"success\" : \"failure\",\n        title: info.Achievement.Title,\n        icon: `/Badge/${achievement.BadgeName}.png`,\n        timestamp: unlockDate ? unlockDate.toLocaleDateString() : \"N/A\",\n    }\n}\n"]}